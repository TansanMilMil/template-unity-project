using System.IO;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace TansanMilMil.Util
{
    public static class ExportLayerDefinition
    {
        private const string OutputPathKey = "TansanMilMilUtil.LayerDefinition.OutputPath";

        [MenuItem("Tools/TansanMilMilUtil/ExportLayerDefinition/Export Layer Definition")]
        private static void Export()
        {
            string outputPath = GetOrSetOutputPath();
            if (string.IsNullOrEmpty(outputPath))
            {
                Debug.LogWarning("Layer definition export cancelled.");
                return;
            }

            GenerateLayerDefinitionFile(outputPath);
        }

        [MenuItem("Tools/TansanMilMilUtil/ExportLayerDefinition/Change Layer Definition Output Path")]
        private static void ChangeOutputPath()
        {
            string currentPath = EditorPrefs.GetString(OutputPathKey, "");
            string newPath = EditorUtility.SaveFilePanel(
                "Select output path for layer definitions",
                string.IsNullOrEmpty(currentPath) ? Application.dataPath : Path.GetDirectoryName(currentPath),
                "LayerDefinitions.cs",
                "cs"
            );

            if (!string.IsNullOrEmpty(newPath))
            {
                EditorPrefs.SetString(OutputPathKey, newPath);
                Debug.Log($"Layer definition output path changed to: {newPath}");
            }
        }

        private static string GetOrSetOutputPath()
        {
            string savedPath = EditorPrefs.GetString(OutputPathKey, "");

            if (string.IsNullOrEmpty(savedPath))
            {
                string defaultPath = EditorUtility.SaveFilePanel(
                    "Select output path for layer definitions",
                    Application.dataPath,
                    "LayerDefinitions.cs",
                    "cs"
                );

                if (!string.IsNullOrEmpty(defaultPath))
                {
                    EditorPrefs.SetString(OutputPathKey, defaultPath);
                    return defaultPath;
                }
                return null;
            }

            return savedPath;
        }

        private static void GenerateLayerDefinitionFile(string outputPath)
        {
            try
            {
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("// Auto-generated layer definitions");
                sb.AppendLine("// Generated by TansanMilMilUtil ExportLayerDefinition");
                sb.AppendLine();
                sb.AppendLine("namespace TansanMilMil.Util");
                sb.AppendLine("{");
                sb.AppendLine("    public static class LayerDefinitions");
                sb.AppendLine("    {");

                // Get layer names from Unity's layer settings
                for (int i = 0; i < 32; i++)
                {
                    string layerName = LayerMask.LayerToName(i);
                    if (!string.IsNullOrEmpty(layerName))
                    {
                        // Convert layer name to valid C# identifier
                        string validName = MakeValidIdentifier(layerName);
                        sb.AppendLine($"        public const string {validName} = \"{layerName}\";");
                    }
                }

                sb.AppendLine("    }");
                sb.AppendLine("}");

                File.WriteAllText(outputPath, sb.ToString());

                // Refresh asset database if the file is within Assets folder
                if (outputPath.StartsWith(Application.dataPath))
                {
                    AssetDatabase.Refresh();
                }

                Debug.Log($"Layer definitions exported successfully to: {outputPath}");
            }
            catch (System.Exception e)
            {
                Debug.LogError($"Failed to export layer definitions: {e.Message}");
            }
        }

        private static string MakeValidIdentifier(string input)
        {
            if (string.IsNullOrEmpty(input))
                return "UnnamedLayer";

            StringBuilder sb = new StringBuilder();

            // First character must be letter or underscore
            char firstChar = input[0];
            if (char.IsLetter(firstChar) || firstChar == '_')
            {
                sb.Append(firstChar);
            }
            else
            {
                sb.Append('_');
                if (char.IsDigit(firstChar))
                    sb.Append(firstChar);
            }

            // Remaining characters can be letters, digits, or underscores
            for (int i = 1; i < input.Length; i++)
            {
                char c = input[i];
                if (char.IsLetterOrDigit(c) || c == '_')
                {
                    sb.Append(c);
                }
                else
                {
                    sb.Append('_');
                }
            }

            string result = sb.ToString();

            // Avoid C# keywords
            if (IsCSharpKeyword(result))
            {
                result = "@" + result;
            }

            return result;
        }

        private static bool IsCSharpKeyword(string identifier)
        {
            string[] keywords = {
                "abstract", "as", "base", "bool", "break", "byte", "case", "catch", "char", "checked",
                "class", "const", "continue", "decimal", "default", "delegate", "do", "double", "else",
                "enum", "event", "explicit", "extern", "false", "finally", "fixed", "float", "for",
                "foreach", "goto", "if", "implicit", "in", "int", "interface", "internal", "is", "lock",
                "long", "namespace", "new", "null", "object", "operator", "out", "override", "params",
                "private", "protected", "public", "readonly", "ref", "return", "sbyte", "sealed",
                "short", "sizeof", "stackalloc", "static", "string", "struct", "switch", "this",
                "throw", "true", "try", "typeof", "uint", "ulong", "unchecked", "unsafe", "ushort",
                "using", "virtual", "void", "volatile", "while"
            };

            return System.Array.IndexOf(keywords, identifier.ToLower()) >= 0;
        }
    }
}
